import { modelSelector } from "./config/model_selector.js"

export async function callGroqAPI(prompt, taskType = "chat") {
  const startTime = Date.now()

  try {
    console.log("ü§ñ GROQ API Call Starting...")
    console.log(`üìù Prompt length: ${prompt.length} characters`)
    console.log(`üéØ Task type: ${taskType}`)

    if (!process.env.GROQ_API_KEY) {
      throw new Error("GROQ_API_KEY not found in environment variables")
    }

    console.log("üîë API Key validated")

    // Get optimal model for this task type
    let selectedModel
    try {
      const selections = await modelSelector.selectOptimalModels()
      selectedModel = selections[taskType] || selections.chat || "llama-3.1-8b-instant"
      console.log(`ü§ñ Selected model for ${taskType}: ${selectedModel}`)
    } catch (error) {
      console.warn("‚ö†Ô∏è Model selection failed, using default")
      selectedModel = "llama-3.1-8b-instant"
    }

    // Enhanced system prompt with LaTeX formatting instructions
    const systemPrompt = `Eres un asistente especializado en matem√°ticas y educaci√≥n adaptativa. 

IMPORTANTE - FORMATO MATEM√ÅTICO:
Cada vez que generes expresiones matem√°ticas, envu√©lvelas siempre entre delimitadores $ de la siguiente forma:
$\\<tu_LaTeX_aqu√≠>$

No generes im√°genes ni SVGs de las f√≥rmulas; asume que el cliente usar√° KaTeX con auto-render en el front-end. 

Cuando te pregunten por derivadas, integrales, sumatorias u otras operaciones, responde usando puro LaTeX y col√≥calo siempre entre $...$. 

Ejemplos:
- "¬øCu√°l es la derivada de sen x?" ‚Üí $\\frac{d}{dx}\\bigl(\\sin x\\bigr) = \\cos x$
- "Integral de x¬≤" ‚Üí $\\int x^2 dx = \\frac{x^3}{3} + C$
- "Funci√≥n cuadr√°tica" ‚Üí $f(x) = ax^2 + bx + c$
- "L√≠mite" ‚Üí $\\lim_{x \\to 0} \\frac{\\sin x}{x} = 1$

No uses otros delimitadores ni escapes adicionales; conf√≠a en que el front-end procesar√° $...$ con KaTeX.

CONTEXTO EDUCATIVO:
Adapta tu respuesta al nivel del estudiante y proporciona explicaciones claras y pedag√≥gicas.
Si tienes contexto de materiales de estudio, √∫salo para dar respuestas m√°s precisas y relevantes.`

    const requestBody = {
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      model: selectedModel,
      max_tokens: 1000,
      temperature: 0.7,
    }

    console.log(`üìä Request config: ${selectedModel}, max_tokens: 1000`)
    console.log("üåê Sending request to GROQ...")

    const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    })

    const responseTime = Date.now() - startTime
    console.log(`‚è±Ô∏è Response received in ${responseTime}ms`)

    if (!response.ok) {
      const errorData = await response.json()
      console.log(`‚ùå GROQ API Error ${response.status}: ${JSON.stringify(errorData)}`)

      // Try fallback model if primary fails
      if (selectedModel !== "llama-3.1-8b-instant") {
        console.log("üîÑ Trying fallback model...")
        return callGroqAPI(prompt, "chat") // Use chat as fallback
      }

      throw new Error(`GROQ API error (${response.status}): ${JSON.stringify(errorData)}`)
    }

    const data = await response.json()
    const content = data.choices?.[0]?.message?.content

    if (!content) {
      throw new Error("No content in GROQ API response")
    }

    console.log(`‚úÖ GROQ API Success in ${responseTime}ms`)
    console.log(`üìÑ Response length: ${content.length} characters`)

    return content.trim()
  } catch (error) {
    const errorTime = Date.now() - startTime
    console.error(`‚ùå GROQ API Error after ${errorTime}ms: ${error.message}`)
    throw error
  }
}

// Enhanced function for quiz generation with LaTeX support
export async function callGroqAPIForQuiz(prompt, taskType = "quiz") {
  const enhancedPrompt = `${prompt}

IMPORTANTE - FORMATO MATEM√ÅTICO PARA QUIZ:
Todas las expresiones matem√°ticas deben estar envueltas en delimitadores $ as√≠: $\\<LaTeX>$
Ejemplos: $x^2$, $\\frac{d}{dx}$, $\\sin(x)$, $\\int_0^1 x dx$

Formato del quiz:
**Pregunta 1:**
[Pregunta con f√≥rmulas en $LaTeX$]

**Opciones:**
a) [Opci√≥n con $LaTeX$ si es necesario]
b) [Opci√≥n con $LaTeX$ si es necesario]
c) [Opci√≥n con $LaTeX$ si es necesario]
d) [Opci√≥n con $LaTeX$ si es necesario]

**Respuesta correcta:** [letra]
**Explicaci√≥n:** [Explicaci√≥n detallada con $LaTeX$]`

  return callGroqAPI(enhancedPrompt, taskType)
}

// Enhanced function for study plan generation with LaTeX support
export async function callGroqAPIForPlan(prompt, taskType = "plan") {
  const enhancedPrompt = `${prompt}

IMPORTANTE - FORMATO MATEM√ÅTICO PARA PLAN:
Todas las f√≥rmulas y expresiones matem√°ticas deben estar en formato $LaTeX$ as√≠: $\\<expresi√≥n>$
Ejemplos: $f(x) = x^2$, $\\lim_{x \\to 0}$, $\\sum_{i=1}^n$

Estructura del plan:
**D√≠a X: [Tema]**
- Objetivos: [Con $LaTeX$ si es necesario]
- Actividades: [Con $LaTeX$ si es necesario]
- Tiempo estimado: X minutos
- Recursos: [Enlaces o materiales]

Incluye ejercicios pr√°cticos con notaci√≥n matem√°tica apropiada.`

  return callGroqAPI(enhancedPrompt, taskType)
}

// Enhanced function for agent analysis with LaTeX support
export async function callGroqAPIForAgents(prompt, taskType = "agents") {
  const enhancedPrompt = `${prompt}

IMPORTANTE - FORMATO MATEM√ÅTICO PARA AN√ÅLISIS:
Si mencionas conceptos matem√°ticos, usa siempre delimitadores $ as√≠: $\\<LaTeX>$
Ejemplos: $\\frac{d}{dx}$, $\\sin x$, $x^2 + 2x + 1$, $\\lim_{x \\to \\infty}$

Proporciona un an√°lisis detallado y constructivo con recomendaciones espec√≠ficas.
Usa notaci√≥n matem√°tica apropiada cuando sea relevante.`

  return callGroqAPI(enhancedPrompt, taskType)
}
